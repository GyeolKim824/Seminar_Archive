typedef struct TreeNode {
	element key;
	struct TreeNode* left;
	struct TreeNode* right;
}TreeNode;

TreeNode* makeNode(element key) {
	TreeNode* node = (TreeNode*)malloc(sizeof(TreeNode));
	node->key = key;
	node->left = NULL;
	node->right = NULL;

	return node;
}

void preOrder(TreeNode* root) {
	if (root) {
		printf("[%d] ", root->key);
		preOrder(root->left);
		preOrder(root->right);
	}
}

TreeNode* insertNode(TreeNode* root, element key) {
	if (root == NULL) {
		return makeNode(key);
	}
	if (key < root->key) {
		root->left = insertNode(root->left, key);
	}
	else if (key > root->key) {
		root->right = insertNode(root->right, key);
	}
	else {
		return NULL;
	}

	return root;
}

TreeNode* minValueNode(TreeNode* root) {
	TreeNode* p = root;
	while (p->left != NULL) {
		p = p->left;
	}
	return p;
}

TreeNode* deleteNode(TreeNode* root, element key) {
	if (root == NULL) {
		return NULL;
	}
	if (key < root->key) {
		root->left = deleteNode(root->left, key);
	}
	else if (key > root->key) {
		root->right = deleteNode(root->right, key);
	}
	else { // 키 값을 가진 노드를 발견
		if (root->left == NULL) { // 오른쪽 노드가 있어요
			TreeNode* tmp = root->right;
			free(root);
			return tmp;
		}
		else if (root->right == NULL) { // 왼쪽 노드가 있어요
			TreeNode* tmp = root->left;
			free(root);
			return tmp;
		}
		else { // 둘 다 있어요
			TreeNode* tmp = minValueNode(root->right);
			root->key = tmp->key;
			root->right = deleteNode(root->right, tmp->key);
		}
	}


	return root;
}

int maxValue(TreeNode* left, TreeNode* right) {
	
}

int getHeight(TreeNode* root) {
	int height = 0;
	if (root != NULL) {
		height = 1 + maxValue(getHeight(root->left),getHeight(root->right);
	}
	return height;
}

int main() {
	TreeNode* root = NULL;

	root = insertNode(root, 35); root = insertNode(root, 68);
	root = insertNode(root, 99); root = insertNode(root, 18);
	root = insertNode(root, 7); root = insertNode(root, 3);
	root = insertNode(root, 12); root = insertNode(root, 26);
	root = insertNode(root, 22); root = insertNode(root, 30);
	preOrder(root); printf("\n"); getchar();

	// root = deleteNode(root, 35); preOrder(root); printf("\n");  getchar();

	printf("%d", getHeight(root));

}
